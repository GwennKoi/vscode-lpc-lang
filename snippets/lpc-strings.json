{
    "capitalize": {
        "prefix": "capitalize",
        "body": "capitalize(${1:string str})"
    },
    "clear_bit": {
        "prefix": "clear_bit",
        "body": "clear_bit(${1:string str}, ${2:int n} )"
    },
    "crypt": {
        "prefix": "crypt",
        "body": "crypt(${1:string str}, ${2:string seed})"
    },
    "explode": {
        "prefix": "explode",
        "body": "explode(${1:string str}, ${2:string del})"
    },
    "implode": {
        "prefix": "implode",
        "body": "implode(${1:mixed *arr},${2:string del})"
    },
    "lower_case": {
        "prefix": "lower_case",
        "body": "lower_case(${1:string str})"
    },
    "ltrim" : {
        "prefix" : "ltrim",
        "body" : "ltrim(${1:string message})"
    },
    "reg_assoc": {
        "prefix": "reg_assoc",
        "body": "reg_assoc(${1:string  str}, ${2:string *pat_arr}, ${3:mixed *tok_arr}${4:, void|mixed def})"
    },
    "regexp": {
        "prefix": "regexp",
        "body": "regexp(${1:string *lines}, ${2:string pattern}${3:, void|int flag})"
    },
    "replace_string": {
        "prefix": "replace_string",
        "body": "replace_string(${1:string str}, ${2:string pattern}, ${3:string replace})"
    },
    "replace_string_max": {
        "prefix": "replace_string",
        "body": "replace_string(${1:string str}, ${2:string pattern}, ${3:string replace}, ${4:int max})"
    },
    "replace_string_first_last": {
        "prefix": "replace_string",
        "body": "replace_string(${1:string str}, ${2:string pattern}, ${3:string replace}, ${4:int first}, ${5:int last})"
    },
    "rtrim" : {
        "prefix" : "rtrim",
        "body" : "trtim(${1:string message})"
    },
    "set_bit": {
        "prefix": "set_bit",
        "body": "set_bit(${1:string str}, ${2:int n})"
    },
    "sprintf": {
        "prefix": "sprintf",
        "body": "sprintf(${1:string formatting}${2,...})"
    },
    "sscanf ": {
        "prefix": "sscanf",
        "body": "sscanf(${1:string str}, ${2:string fmt}${3:, mixed var1...})"
    },
    "strcmp": {
        "prefix": "strcmp",
        "body": "strcmp(${1:string one}, ${2:string two})"
    },
    "string_decode" : {
        "prefix" : "string_decode",
        "body" : "string_decode(${1:buffer buf}, ${2:string encoding})"
    },
    "string_encode" : {
        "prefix" : "string_encode",
        "body" : "string_encode(${1:string message}, ${2:string encoding})"
    },
    "stringp": {
        "prefix": "stringp",
        "body": "stringp(${1:mixed arg})"
    },
    "strlen": {
        "prefix": "strlen",
        "body": "strlen(${1:string str})"
    },
    "strsrch": {
        "prefix": "strsrch",
        "body": "strsrch(${1:string str}, ${2:string substr | int char}, ${3:int flag})"
    },
    "strwidth" : {
        "prefix" : "strwidth",
        "body" : "strwidth(${1:string message})"
    },
    "test_bit": {
        "prefix": "test_bit",
        "body": "test_bit(${1:string str},${2:int n})"
    },
    "trim" : {
        "prefix" : "trim",
        "body" : "trim(${1:string message})"
    }
}
