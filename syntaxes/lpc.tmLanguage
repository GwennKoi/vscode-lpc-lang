<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>fileTypes</key>
		<array>
			<string>c</string>
			<string>h</string>
			<string>lpc</string>
		</array>
		<key>firstLineMatch</key>
		<string>(-[*]-( [Mm]ode:)? [Ll][Pp][Cc] -[*]-|^#!/.*\blpc\b)</string>
		<key>foldingStartMarker</key>
		<string>(?x)
     /\*\*(?!\*)
    |^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?
    \{\s*($|//|/\*(?!.*?\*/.*\S))
    |(^\s*//\s*(\{\{\{))</string>
		<key>foldingStopMarker</key>
		<string>(?&lt;!\*)\n\*\*/|^\s*\}|//\s*\}\}\}$</string>
		<key>keyEquivalent</key>
		<string>^~C</string>
		<key>name</key>
		<string>LPC</string>
		<key>patterns</key>
		<array>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-enabled</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-enabled-block</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-disabled</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-disabled-block</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-other</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-other-block</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#disabled</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#parens</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#comments</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#pragma-mark</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#fncall</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#block</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>Control flow keywords</string>
				<key>match</key>
				<string>\b(if|else|while|for|foreach|do|return|continue|break|switch|case|default|catch|inherit)\b</string>
				<key>name</key>
				<string>keyword.control.lpc</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(float|int|void|object|class|mapping|string|mixed|function|ref)\b</string>
				<key>name</key>
				<string>storage.type.lpc</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>Modifiers</string>
				<key>match</key>
				<string>\b(public|private|protected|nosave|nomask)\b</string>
				<key>name</key>
				<string>storage.modifier.lpc</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>Numeric values</string>
				<key>match</key>
				<string>(?:\b|(?&lt;!\.)(?=\.))((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]+)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b</string>
				<key>name</key>
				<string>constant.numeric.lpc</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>"</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.begin.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>"</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.end.lpc</string>
					</dict>
				</dict>
				<key>name</key>
				<string>string.quoted.double.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#string_escaped_char</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#string_placeholder</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>comment</key>
				<string>Multiline string literal</string>
				<key>match</key>
				<string>(@{1,2}(\w*))\n((.|\n)*?)\n(###\s*)?(\2)\b</string>
				<key>name</key>
				<string>string.quoted.other.lpc</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>'</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.begin.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>'</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.end.lpc</string>
					</dict>
				</dict>
				<key>name</key>
				<string>string.quoted.single.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#string_escaped_char</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>(?x)
                 ^\s*\#\s*(define)\s+           # define
                 ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))    # macro name
                 (?:                                # and optionally:
                   (\()                            # an open parenthesis
                     (
                       \s* \g&lt;id&gt; \s*            # first argument
                       ((,) \s* \g&lt;id&gt; \s*)*     # additional arguments
                       (?:\.\.\.)?               # varargs ellipsis?
                     )
                   (\))                             # a close parenthesis
                 )?</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.define.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.function.preprocessor.lpc</string>
					</dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.parameters.lpc</string>
					</dict>
					<key>5</key>
					<dict>
						<key>name</key>
						<string>variable.parameter.preprocessor.lpc</string>
					</dict>
					<key>7</key>
					<dict>
						<key>name</key>
						<string>punctuation.separator.parameters.lpc</string>
					</dict>
					<key>8</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.parameters.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?=(?://|/\*))|$|\n</string>
				<key>name</key>
				<string>meta.preprocessor.macro.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.lpc</string>
					</dict>
					<dict>
						<key>include</key>
						<string>$base</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*(include)\b</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.include.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?=(?://|/\*))|$</string>
				<key>name</key>
				<string>meta.preprocessor.include.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.lpc</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>\"</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.begin.lpc</string>
							</dict>
						</dict>
						<key>end</key>
						<string>\"</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.end.lpc</string>
							</dict>
						</dict>
						<key>name</key>
						<string>string.quoted.double.include.lpc</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>&lt;</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.begin.lpc</string>
							</dict>
						</dict>
						<key>end</key>
						<string>&gt;</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.end.lpc</string>
							</dict>
						</dict>
						<key>name</key>
						<string>string.quoted.other.lt-gt.include.lpc</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*(define|echo|elif|else|if|ifdef|ifndef|pragma|undef|endif)\b</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?=(?://|/\*))|$</string>
				<key>name</key>
				<string>meta.preprocessor.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.lpc</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>(?x)(?:^|(?:(?=\s)(?&lt;!else|return)(?&lt;=\w)|(?=\s*[[:alnum:]_.|\(\)])))(\s*)(?!\b(while|for|do|if|else|switch|catch|return|foreach|object|int|float|function|mapping|string|mixed|class)\b\s*)((?:`\(\)|`[-&lt;.&gt;^|&amp;*~/+%=!\[\]]+|`[[:alpha:]_][[:alnum:]_]*+|[[:alpha:]_][[:alnum:]_]*+)++)\s*(?=\()</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>punctuation.whitespace.function.leading.lpc</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>entity.name.function.lpc</string>
					</dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.parameters.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?&lt;=\})|(?=#)|(;)</string>
				<key>name</key>
				<string>meta.function.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#comments</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#parens</string>
					</dict>
					<dict>
						<key>match</key>
						<string>\bconstant\b</string>
						<key>name</key>
						<string>storage.modifier.lpc</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#block</string>
					</dict>
				</array>
			</dict>
		</array>
		<key>repository</key>
		<dict>
			<key>block</key>
			<dict>
				<key>begin</key>
				<string>\{</string>
				<key>end</key>
				<string>\}</string>
				<key>name</key>
				<string>meta.block.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#block_innards</string>
					</dict>
				</array>
			</dict>
			<key>block_innards</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#fncall</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#block</string>
					</dict>
					<dict>
						<key>include</key>
						<string>$base</string>
					</dict>
				</array>
			</dict>
			<key>comments</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>/\*</string>
						<key>captures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.lpc</string>
							</dict>
						</dict>
						<key>end</key>
						<string>\*/</string>
						<key>name</key>
						<string>comment.block.lpc</string>
					</dict>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.lpc</string>
							</dict>
						</dict>
						<key>match</key>
						<string>(//).*$\n?</string>
						<key>name</key>
						<string>comment.line.double-slash.lpc</string>
					</dict>
				</array>
			</dict>
			<key>disabled</key>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*if(n?def)?\b.*$</string>
				<key>comment</key>
				<string>eat nested preprocessor if(def)s</string>
				<key>end</key>
				<string>^\s*#\s*endif\b.*$</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#disabled</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#pragma-mark</string>
					</dict>
				</array>
			</dict>
			<key>fncall</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.whitespace.function-call.leading.lpc</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>support.function.any-method.lpc</string>
							</dict>
							<key>3</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.parameters.lpc</string>
							</dict>
						</dict>
						<key>match</key>
						<string>(?x)
                     (?: (?= \s )  (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+))?
                     (\b
                      (?!(while|for|do|if|else|foreach|switch|
                          catch|return|
                          mapping|mixed|int|float|class|function|
                          string|object)\s*\()
                        (?: `\(\)                  |
                            `[-&lt;.&gt;^|&amp;*~/+%=!\[\]]+ |
                            `[[:alnum:]_]            |
                            [[:alpha:]_][[:alnum:]_]*+\b
                        )++    # actual name
                     )
                     \s*(\()</string>
						<key>name</key>
						<string>meta.function-call.lpc</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#block</string>
					</dict>
				</array>
			</dict>
			<key>parens</key>
			<dict>
				<key>begin</key>
				<string>\(</string>
				<key>end</key>
				<string>\)</string>
				<key>name</key>
				<string>meta.parens.lpc</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>$base</string>
					</dict>
				</array>
			</dict>
			<key>pragma-mark</key>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.pragma.lpc</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>meta.toc-list.pragma-mark.lpc</string>
					</dict>
				</dict>
				<key>match</key>
				<string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
				<key>name</key>
				<string>meta.section</string>
			</dict>
			<key>preprocessor-rule-disabled</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0)\b).*</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.lpc</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b)</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.lpc</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.lpc</string>
							</dict>
						</dict>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>$base</string>
							</dict>
						</array>
					</dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>name</key>
						<string>comment.block.preprocessor.if-branch</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
							</dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<key>preprocessor-rule-disabled-block</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0)\b).*</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.lpc</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b)</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.lpc</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.lpc</string>
							</dict>
						</dict>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#block_innards</string>
							</dict>
						</array>
					</dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>name</key>
						<string>comment.block.preprocessor.if-branch.in-block</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
							</dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<key>preprocessor-rule-enabled</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0*1)\b)</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.lpc</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b).*</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.lpc</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.lpc</string>
							</dict>
						</dict>
						<key>contentName</key>
						<string>comment.block.preprocessor.else-branch</string>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
							</dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
							</dict>
						</array>
					</dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>$base</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<key>preprocessor-rule-enabled-block</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0*1)\b)</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.lpc</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b).*</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.lpc</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.lpc</string>
							</dict>
						</dict>
						<key>contentName</key>
						<string>comment.block.preprocessor.else-branch.in-block</string>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
							</dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
							</dict>
						</array>
					</dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#block_innards</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<key>preprocessor-rule-other</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b).*$</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>$base</string>
					</dict>
				</array>
			</dict>
			<key>preprocessor-rule-other-block</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.lpc</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.lpc</string>
					</dict>
				</dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b).*$</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#block_innards</string>
					</dict>
				</array>
			</dict>
			<key>string_escaped_char</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>\\(\\|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|d[0-9]+|[[:alnum:]'"?])</string>
						<key>name</key>
						<string>constant.character.escape.lpc</string>
					</dict>
					<dict>
						<key>match</key>
						<string>\\.</string>
						<key>name</key>
						<string>invalid.illegal.unknown-escape.lpc</string>
					</dict>
				</array>
			</dict>
			<key>string_placeholder</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?x)%
                  (?!\s|%)                            # Not followed by space or %
                  \*?                                 # May be followed by a *
                  (\d+\$)?                           # field (argument #)
                  [*#0\- +'\[\]]*                   # flags
                  [,;:_]?                              # separator character (AltiVec)
                  ((-?\d+)|\*(-?\d+\$)?)?          # minimum field width
                  (\.((-?\d+)|\*(-?\d+\$)?)?)?    # precision
                  (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
                  [diouxXDOUeEfFgGaACcSspnYyMmDdHhWtzp%{}]         # conversion type</string>
						<key>name</key>
						<string>constant.other.placeholder.lpc</string>
					</dict>
					<dict>
						<key>match</key>
						<string>%(?!\s|%)(!&lt;%)</string>
						<key>name</key>
						<string>invalid.illegal.placeholder.lpc</string>
					</dict>
				</array>
			</dict>
		</dict>
		<key>scopeName</key>
		<string>source.lpc</string>
		<key>uuid</key>
		<string>f0c5f4ad-3e8a-4add-9ebf-2ce1d5e5262f</string>
	</dict>
</plist>
